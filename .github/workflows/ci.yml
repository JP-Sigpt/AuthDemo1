name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    services:
      mongo:
        image: mongo:6.0
        ports: [27017:27017]
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=60s
    env:
      MONGO_URL: mongodb://localhost:27017/mfa-auth-db
      MONGO_DB_URL: mongodb://localhost:27017/mfa-auth-db
      CI: true
      CHROME_BIN: /usr/bin/google-chrome
      BASE_URL: http://localhost:3001
      SERVER_URL: http://localhost:7001
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Cache client dependencies
        uses: actions/cache@v4
        with:
          path: client/node_modules
          key: client-deps-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            client-deps-${{ runner.os }}-${{ matrix.node-version }}-

      - name: Cache server dependencies
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: server-deps-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            server-deps-${{ runner.os }}-${{ matrix.node-version }}-

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Lint client
        run: cd client && npm run lint

      - name: Lint server
        run: cd server && npx eslint .

      - name: Run client unit tests
        run: cd client && npm run test:unit

      - name: Run server unit tests
        run: cd server && npx jest

      - name: Build client
        run: cd client && npm run build

      - name: Upload client build artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist

      - name: Install Chrome for e2e
        uses: browser-actions/setup-chrome@v1

      - name: Check MongoDB service status
        run: |
          echo "Checking MongoDB service status..."
          echo "Docker containers:"
          docker ps | grep mongo || echo "No MongoDB container found"
          echo "MongoDB service logs:"
          docker logs $(docker ps -q --filter "ancestor=mongo:6.0") 2>/dev/null | tail -20 || echo "No MongoDB logs found"
          echo "Port 27017 status:"
          netstat -tlnp | grep 27017 || echo "Port 27017 not listening"

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          echo "Checking MongoDB service status..."

          # Wait for MongoDB to start up - use a simpler approach
          for i in {1..30}; do
            echo "Attempt $i: Checking MongoDB..."
            
            # Check if MongoDB is listening on port 27017
            if netstat -tlnp | grep -q ":27017"; then
              echo "MongoDB port is listening"
              
              # Try a simple connection test
              if timeout 5 bash -c "</dev/tcp/localhost/27017"; then
                echo "MongoDB is ready!"
                break
              fi
            fi
            
            echo "MongoDB not ready yet, waiting 2 seconds..."
            sleep 2
          done

          # Final check
          if timeout 5 bash -c "</dev/tcp/localhost/27017"; then
            echo "MongoDB is ready!"
          else
            echo "MongoDB failed to start within timeout"
            echo "Checking if MongoDB process is running:"
            ps aux | grep mongo || echo "No MongoDB process found"
            echo "Checking MongoDB service logs:"
            docker logs $(docker ps -q --filter "ancestor=mongo:6.0") 2>/dev/null | tail -20 || echo "No MongoDB container logs found"
            exit 1
          fi

      - name: Test MongoDB connection
        run: |
          echo "Testing MongoDB connection..."

          # Simple connection test
          if timeout 5 bash -c "</dev/tcp/localhost/27017"; then
            echo "MongoDB connection test successful"
          else
            echo "MongoDB connection test failed"
            exit 1
          fi

      - name: Start server in background
        run: |
          cd server
          echo "Starting server with MongoDB URL: $MONGO_DB_URL"
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

          # Start server with proper error handling
          npm start > server.log 2>&1 &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          echo "Server started in background"

          # Wait and check if server is still running
          sleep 10
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server is still running"
          else
            echo "Server process died, checking logs:"
            cat server.log
            exit 1
          fi

          echo "Server log (first 50 lines):"
          head -50 server.log || echo "No server log yet"

      - name: Start client in background
        run: |
          cd client
          echo "Starting client..."
          echo "Current directory: $(pwd)"

          # Start client with proper error handling
          npm run dev > client.log 2>&1 &
          CLIENT_PID=$!
          echo "Client PID: $CLIENT_PID"
          echo "Client started in background"

          # Wait and check if client is still running
          sleep 15
          if kill -0 $CLIENT_PID 2>/dev/null; then
            echo "Client is still running"
          else
            echo "Client process died, checking logs:"
            cat client.log
            exit 1
          fi

          echo "Client log (first 50 lines):"
          head -50 client.log || echo "No client log yet"

      - name: Check if services are running
        run: |
          echo "Checking if services are running..."
          echo "=== Process Status ==="
          ps aux | grep -E "(node|npm)" | grep -v grep || echo "No node processes found"
          echo "=== Port Status ==="
          netstat -tlnp | grep -E "(3001|7001)" || echo "No services listening on expected ports"
          echo "=== Server Status ==="
          curl -f http://localhost:7001/test || echo "Server not responding"
          echo "=== Client Status ==="
          curl -f http://localhost:3001 || echo "Client not responding"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          echo "Waiting for server..."
          timeout 120 bash -c 'until curl -f http://localhost:7001/test; do echo "Server not ready, waiting..."; sleep 5; done'
          echo "Server is ready!"
          echo "Waiting for client..."
          timeout 120 bash -c 'until curl -f http://localhost:3001; do echo "Client not ready, waiting..."; sleep 5; done'
          echo "Client is ready!"
          echo "All services are ready!"

      - name: Run client e2e tests (Selenium)
        run: cd client && npm run test:e2e
        env:
          MONGO_URL: ${{ env.MONGO_URL }}
          MONGO_DB_URL: ${{ env.MONGO_DB_URL }}
          BASE_URL: ${{ env.BASE_URL }}
          SERVER_URL: ${{ env.SERVER_URL }}
          CHROME_BIN: ${{ env.CHROME_BIN }}
          NODE_ENV: test
        continue-on-error: true

      - name: Upload server logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: server/server.log

      - name: Upload client logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: client-logs
          path: client/client.log
